openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample TODO API
  description: >-
    TODOリストAPIを使ったOpenAPIのサンプル
servers:
  - url: 'http://localhost:8080'
    description: LOCAL server
  - url: 'http://localhost:8002'
    description: MOCK server
paths:
  /todos:
    get:
      tags:
        - TODO
      description: >
        全てのTODOを取得する
      operationId: fetchTodos
      responses:
        '200':
          description: 成功レスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodosResponse'
    post:
      tags:
        - TODO
      description: >
        TODOを１件追加する
      operationId: addTodo
      requestBody:
        description: 追加するTODO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
      responses:
        '201':
          description: 成功レスポンス
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: TODO ID.
                    example: 1
  /todos/{todoId}:
    get:
      tags:
        - TODO
      description: >
        指定されたTODOIDのTODOを１件返却する
      operationId: fetchTodo
      parameters:
        - name: todoId
          in: "path"
          description: "取得したいTODOのID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 1
      responses:
        '200':
          description: 成功レスポンス
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
    put:
      tags:
        - TODO
      description: >
        TODOを更新する
      operationId: updateTodo
      parameters:
        - name: todoId
          in: "path"
          description: "更新したいTODOのID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 1
      requestBody:
        description: 更新内容
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoRequest'
      responses:
        '204':
          description: 成功レスポンス
    delete:
      tags:
        - TODO
      description: >
        TODOを削除する
      operationId: deleteTodo
      parameters:
        - name: todoId
          in: "path"
          description: "削除したいTODOのID"
          required: true
          schema:
            type: "integer"
            format: "int64"
          example: 1
      responses:
        '204':
          description: 成功レスポンス
components:
  schemas:
    Todo:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        title:
          type: "string"
          example: "買い物"
        content:
          type: "string"
          example: "今日の帰りに夕食の材料を買う"
        createdAt:
          type: "string"
          description: "登録日時"
          format: "date-time"
          example: "2022-02-05T17:37:01.910Z"
        updatedAt:
          type: "string"
          description: "更新日時"
          format: "date-time"
          example: "2022-02-05T17:37:01.910Z"
    TodosResponse:
      type: "object"
      properties:
        todos: 
          type: "array"
          items: 
            $ref: "#/components/schemas/Todo"
          example:
            - "id": 3
              "title": "ゴミ出し"
              "content": "次の火曜日は燃えないゴミの日なので忘れないように"
              "createdAt": "2022-02-05T17:37:01.910Z"
              "updatedAt": "2022-02-05T17:37:01.910Z"
            - "id": 2
              "title": "勉強"
              "content": "TOEICの勉強を１時間やる"
              "createdAt": "2022-02-05T17:37:01.910Z"
              "updatedAt": "2022-02-05T17:37:01.910Z"
            - "id": 1
              "title": "買い物"
              "content": "今日の帰りに夕食の材料を買う"
              "createdAt": "2022-02-05T17:37:01.910Z"
              "updatedAt": "2022-02-05T17:37:01.910Z"
    TodoRequest:
      type: "object"
      properties:
        title:
          type: "string"
          example: "買い物"
        content:
          type: "string"
          example: "今日の帰りに夕食の材料を買う"
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
security:
  - Bearer: []