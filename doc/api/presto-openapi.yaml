openapi: 3.0.0
info:
  version: 1.0.0
  title: Presto Backend API
  description: >-
    Presto Backend
servers:
  - url: 'http://localhost:8080'
    description: LOCAL server
  - url: 'http://localhost:8002'
    description: MOCK server
paths:
  /api/health-check:
    get:
      tags:
        - Util
      description: >
        サーバーのヘルスチェック用エンドポイント
      operationId: healthCheck
      responses:
        '200':
          description: Healty
  /api/users/me:
    get:
      tags:
        - Users
      description: >
        ログインユーザーの情報を取得する
      operationId: fetchLoginUserInfo
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: トークンが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: ユーザー未登録
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users:
    post:
      tags:
        - Users
      description: >
        ユーザーを新規登録する
      operationId: registerUser
      requestBody:
        description: 新規登録するユーザーの情報
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: 登録成功
        '400':
          description: リクエストボディが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: トークンが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Users
      description: |
        # 概要
        ユーザーの一覧を取得する。<br>
        クエリパラメータで取得するユーザーの条件を指定可能。
        # 詳細仕様
        - ログインユーザー自身は一覧に含まれない。
        - 一覧は登録日時(createdAt)の降順で返却される。
      operationId: fetchOtherUsers
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: "好きなアーティスなどのキーワードを指定。自己紹介と好きなジャンル・グループ・アーティストの記載から検索される`,`区切りで複数指定可能"
        - in: query
          name: position
          schema:
            type: integer
          description: "`positionsのid`を指定。`,`区切りで複数指定可能"
        - in: query
          name: prefecture
          schema:
            type: integer
          description: "`prefecturesのid`を指定。`,`区切りで複数指定可能"
        - in: query
          name: minage
          schema:
            type: integer
          description: "取得対象に含める最低年齢"
        - in: query
          name: maxage
          schema:
            type: integer
          description: "取得対象に含める最高年齢"
      responses:
        '200':
          description: |
            正常レスポンス。<br>
            一覧が0件の場合、`users:[]`が返却される。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          description: クエリパラメータが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: トークンが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users/{userId}:
    get:
      tags:
        - Users
      description: >
        他ユーザーの詳細情報を取得する
      operationId: fetchOtherUserDetail
      parameters:
        - name: userId
          in: path
          description: 詳細情報を取得したい他ユーザーのUser ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetailResponse'
        '401':
          description: トークンが不正
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: パスパラメータで指定したユーザーが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    User:
      type: "object"
      required:
        - userId
        - name
        - age
        - positions
        - prefecture
        - createdAt
      properties:
        userId:
          type: "string"
          example: "auth0|xxxxxxxxxxxxxxxxxxxxxxxxxx"
        name:
          type: "string"
          example: "坂東 町雄"
        age:
          type: "integer"
          format: "int64"
          example: 30
        image:
          type: "string"
          example: "http://s3.amazonaws.com/xxxx"
          description: AWS S3に保存された画像ファイルのURL
        positions:
          type: array
          items: 
            $ref: "#/components/schemas/Position"
          example: 
            - name: "ギター"
              career: 1
            - name: "ベース"
              career: 2
        prefecture:
          type: "string"
          example: "福岡県"
        createdAt:
          type: "string"
          description: "登録日時"
          format: "date-time"
          example: "2022-02-05T17:37:01.910Z"
    Position:
      type: "object"
      required:
        - name
        - career
      properties:
        name:
          type: "string"
          example: "ギター"
        career:
          type: "integer"
          format: "int64"
          example: 1
    RegisterPosition:
      type: "object"
      required:
        - id
        - career
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        career:
          type: "integer"
          format: "int64"
          example: 1
    UserDetail:
      type: "object"
      required:
        - userId
        - name
        - readName
        - age
        - positions
        - prefecture
        - createdAt
        - updatedAt
      properties:
        userId:
          type: "string"
          example: "auth0|xxxxxxxxxxxxxxxxxxxxxxxxxx"
        name:
          type: "string"
          example: "坂東 町雄"
        age:
          type: "integer"
          format: "int64"
          example: 30
        images:
          type: "array"
          items:
            type: string
          example: 
            - "http://s3.amazonaws.com/xxxx"
            - "http://s3.amazonaws.com/yyyy"
            - "http://s3.amazonaws.com/zzzz"
          description: AWS S3に保存された画像ファイルのURL
        positions:
          type: array
          items: 
            $ref: "#/components/schemas/Position"
          example: 
            - name: "ギター"
              career: 1
            - name: "ベース"
              career: 2
        comment:
          type: "string"
          example: "Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat."
        prefecture:
          type: "string"
          example: "福岡県"
        preference:
          type: "string"
          example: "演奏を楽しみたい"
        practiceCycle:
          type: "string"
          example: "1ヶ月に一度"
        performanceUrl:
          type: "string"
          example: "https://youtube.com/abcd~"
        likeGenres:
          type: "array"
          items:
            type: string
          example: 
            - パンク
            - メロコア
            - J-ROCK
        likeArtists:
          type: "array"
          items:
            type: string
          example: 
            - The Crash
            - The Sex Pistols
            - Siouxsie & The Banshees
        hopePracticeDays:
          type: "array"
          items:
            type: string
          example: 
            - 土
            - 日
        createdAt:
          type: "string"
          description: "登録日時"
          format: "date-time"
          example: "2022-02-05T17:37:01.910Z"
        updatedAt:
          type: "string"
          description: "更新日時"
          format: "date-time"
          example: "2022-02-05T17:37:01.910Z"
    RegisterUserRequest:
      type: "object"
      required:
        - name
        - readName
        - age
        - positions
        - prefectureId
      properties:
        name:
          type: "string"
          example: "坂東 町雄"
          minLength: 1
          maxLength: 30
        age:
          type: "integer"
          format: "int64"
          example: 30
          minimum: 1
          maximum: 100
        positions:
          type: array
          minItems: 1
          maxItems: 5
          items: 
            $ref: "#/components/schemas/RegisterPosition"
          example: 
            - id: 1
              career: 1
            - id: 2
              career: 2
        prefectureId:
          type: "integer"
          format: "int64"
          example: 0
          minimum: 1
          maximum: 47
    UserResponse:
      $ref: "#/components/schemas/User"
    UserListResponse:
      type: "object"
      required:
        - users
      properties:
        users:
          type: array
          items: 
            $ref: "#/components/schemas/User"
          example: 
            - "userId": auth0|yyyyyyyyyyyyyyyyyyyyyyyyyy
              "name": "田中 太郎"
              "age": 21
              "image": "http://s3.amazonaws.com/yyyy"
              "positions": 
                - name: "ギター"
                  career: 3
              "createdAt": "2022-02-05T17:37:01.910Z"
            - "userId": auth0|zzzzzzzzzzzzzzzzzzzzzzzzzz
              "name": "鈴木 次郎"
              "age": 40
              "image": "http://s3.amazonaws.com/zzzz"
              "positions": 
                - name: "ベース"
                  career: 2
                - name: "ボーカル"
                  career: 1
              "createdAt": "2022-02-04T17:37:01.910Z"
            - "userId": auth0|aaaaaaaaaaaaaaaaaaaaaaaaaa
              "name": "佐々木 町子"
              "age": 18
              "image": "http://s3.amazonaws.com/aaaa"
              "positions": 
                - name: "ボーカル"
                  career: 1
              "createdAt": "2022-02-03T17:37:01.910Z"
    UserDetailResponse:
      $ref: "#/components/schemas/UserDetail"
    ErrorResponse:
      type: "object"
      required:
        - code
      properties:
        code:
          type: "string"
          example: "1009"
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Credentials or access token for API
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
security:
  - Bearer: []